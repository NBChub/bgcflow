import os
import sys

import pandas as pd


def extract_ncbi_information(assembly_report_path, outfile):
    """
    Extract NCBI assembly json reports generated by get_assembly_information.py in a given directory into a csv file

    Parameters
    ----------
    1. assembly_report_path : str / path
        Three different input types can be used:
        - A directory containing assembly information json files generated by get_assembly_information.py
        - A single json file generated by get_assembly_information.py
        - A list of files as string separated by spaces (put the string inside '' in bash expression)
    2. outfile : str / path
        Location of the output csv file

    Returns
    -------
    1. outfile : .csv file
        A comma separated table summarizing the NCBI assembly reports metadata
    '''
    """

    if os.path.isdir(assembly_report_path):
        sys.stderr.write(
            f"Summarizing NCBI assembly information from {assembly_report_path}...\n"
        )
        ncbi_json_files = [
            os.path.join(assembly_report_path, f)
            for f in os.listdir(assembly_report_path)
            if f.endswith(".json")
        ]
    elif os.path.isfile(assembly_report_path) and assembly_report_path.endswith(
        ".json"
    ):
        sys.stderr.write(
            f"Getting NCBI assembly information from a single file: {assembly_report_path}\n"
        )
        ncbi_json_files = [assembly_report_path]
    elif type(assembly_report_path) == str:
        ncbi_json_files = [
            f for f in assembly_report_path.split() if f.endswith(".json")
        ]
        sys.stderr.write(
            f"Summarizing NCBI assembly information from the given list of {len(ncbi_json_files)} files...\n"
        )

    dfs = []  # an empty list to store the data frames
    for file in ncbi_json_files:
        data = pd.read_json(file).T  # read data frame from json file
        dfs.append(data)  # append the data frame to the list

    df_ncbi = pd.concat(dfs)  # concatenate all the data frames in the list.
    df_ncbi.reset_index(inplace=True)
    df_ncbi = df_ncbi.rename(columns={"index": "genome_id"})

    sys.stderr.write(f"Summarized {len(df_ncbi.index)} NCBI assembly information.\n")
    df_ncbi.to_csv(outfile, index=False)
    return None


if __name__ == "__main__":
    extract_ncbi_information(sys.argv[1], sys.argv[2])
