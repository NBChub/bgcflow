import logging
import sys
from pathlib import Path

import pandas as pd

log_format = "%(levelname)-8s %(asctime)s   %(message)s"
date_format = "%d/%m %H:%M:%S"
logging.basicConfig(format=log_format, datefmt=date_format, level=logging.DEBUG)


def extract_ncbi_information(assembly_report_path, outfile):
    """
    Extract NCBI assembly json reports generated by get_assembly_information.py in a given directory into a csv file

    Parameters
    ----------
    1. assembly_report_path : str / path
        Three different input types can be used:
        - A directory containing assembly information json files generated by get_assembly_information.py
        - A single json file generated by get_assembly_information.py
        - A list of files as string separated by spaces (put the string inside '' in bash expression)
        - A text file (.txt) containing the paths of the json files (one per line, or space-separated on a single line)
    2. outfile : str / path
        Location of the output csv file

    Returns
    -------
    1. outfile : .csv file
        A comma-separated table summarizing the NCBI assembly reports metadata
    """

    assembly_report_path = Path(assembly_report_path)
    outfile = Path(outfile)

    if assembly_report_path.is_dir():
        logging.info(
            f"Summarizing NCBI assembly information from {assembly_report_path}..."
        )
        ncbi_json_files = [
            file
            for file in assembly_report_path.iterdir()
            if file.is_file() and file.suffix == ".json"
        ]
    elif assembly_report_path.is_file() and assembly_report_path.suffix == ".json":
        logging.info(
            f"Getting NCBI assembly information from a single file: {assembly_report_path}"
        )
        ncbi_json_files = [assembly_report_path]
    elif assembly_report_path.is_file() and assembly_report_path.suffix == ".txt":
        logging.info(
            f"Reading NCBI assembly information from a text file: {assembly_report_path}"
        )
        with open(assembly_report_path, "r") as file:
            file_content = [i.strip("\n") for i in file.readlines()]
            if len(file_content) == 1:
                # Paths space-separated on a single line
                paths = file_content[0].split()
            else:
                # Paths written on separate lines
                paths = file_content
            ncbi_json_files = [
                Path(path) for path in paths if Path(path).suffix == ".json"
            ]
    elif isinstance(assembly_report_path, str):
        ncbi_json_files = [
            Path(file)
            for file in assembly_report_path.split()
            if Path(file).suffix == ".json"
        ]
        logging.info(
            f"Summarizing NCBI assembly information from the given list of {len(ncbi_json_files)} files..."
        )

    dfs = []  # an empty list to store the data frames
    for file in ncbi_json_files:
        data = pd.read_json(file).T  # read data frame from json file
        dfs.append(data)  # append the data frame to the list

    df_ncbi = pd.concat(dfs)  # concatenate all the data frames in the list.
    df_ncbi.reset_index(inplace=True)
    df_ncbi = df_ncbi.rename(columns={"index": "genome_id"})

    logging.info(f"Summarized {len(df_ncbi.index)} NCBI assembly information.")
    df_ncbi.to_csv(outfile, index=False)
    return None


if __name__ == "__main__":
    extract_ncbi_information(sys.argv[1], sys.argv[2])
