import os
import sys
import pandas as pd


def get_ncbi_meta(assembly_report_path, outfile=None, genome_id=None):
    """
    Read NCBI assembly reports downloaded using ncbi-genome-download https://github.com/kblin/ncbi-genome-download and convert it to a json format.
    The assembly report can be downoloaded by using assembly_report as --formats while running ncbi-genome-download.

    Parameters
    ----------
    1. assembly_report_path : str / path
        Location of the assembly information json file generated by get_assembly_information.py
    2. outfile : str / path
        Location of the output csv file
    3. genome_id : str
        Genome accession id

    Returns
    -------
    1. outfile : .json file
        A json file summarizing the NCBI assembly reports metadata.
        If genome_id is not provided, the script will determine the genome id from the file basename.
        If outfile is not defined, it will generate a json file in the current directory with this format: {genome_id}.json.
    """
    if genome_id == None:
        genome_id = os.path.splitext(os.path.basename(assembly_report_path))[0]

    if outfile == None:
        outfile = f"{genome_id}.json"

    # List of columns in df_ncbi_meta
    ncbi_meta_columns = [
        "assembly",
        "organism",
        "genus",
        "species",
        "strain",
        "tax_id",
        "refseq_category",
        "refseq",
        "genbank",
        "assembly_type",
        "release_type",
        "assembly_level",
        "genome_representation",
        "refseq_genbank_identity",
        "biosample",
        "submitter",
        "date",
    ]

    df_ncbi_meta = pd.DataFrame(index=[genome_id], columns=ncbi_meta_columns)
    df_ncbi_meta.index.name = "genome_id"

    with open(assembly_report_path, "r") as report_file:
        lines = report_file.readlines()
        strain_found = False

        for line in lines:
            if line.startswith("# Assembly name:"):
                assembly_accn = line.split("Assembly name:")[1].strip()
                df_ncbi_meta.loc[genome_id, "assembly"] = assembly_accn
            elif line.startswith("# Organism name"):
                organism = line.split("Organism name:")[1].strip()
                df_ncbi_meta.loc[genome_id, "organism"] = organism
                df_ncbi_meta.loc[genome_id, "genus"] = organism.strip().split(" ")[0]
                df_ncbi_meta.loc[genome_id, "species"] = organism.strip().split(" ")[1]
            elif line.startswith("# Infraspecific name:"):
                strain = line.split("Infraspecific name:")[1].strip()
                if "strain=" in strain:
                    df_ncbi_meta.loc[genome_id, "strain"] = strain.split("strain=")[1]
                    strain_found = True
            elif line.startswith("# Isolate:"):
                if strain_found == False:
                    strain = line.split("Isolate:")[1].strip()
                    df_ncbi_meta.loc[genome_id, "strain"] = strain
                    strain_found = True
            elif line.startswith("# Taxid"):
                tax_id = line.split("Taxid:")[1].strip()
                df_ncbi_meta.loc[genome_id, "tax_id"] = tax_id
            elif line.startswith("# BioSample"):
                biosample = line.split("BioSample:")[1].strip()
                df_ncbi_meta.loc[genome_id, "biosample"] = biosample
            elif line.startswith("# BioProject"):
                bioproject = line.split("# BioProject:")[1].strip()
                df_ncbi_meta.loc[genome_id, "BioProject"] = bioproject
            elif line.startswith("# Submitter"):
                submitter = line.split("Submitter:")[1].strip()
                df_ncbi_meta.loc[genome_id, "submitter"] = submitter
            elif line.startswith("# Date"):
                date = line.split("Date:")[1].strip()
                df_ncbi_meta.loc[genome_id, "date"] = date
            elif line.startswith("# Assembly type:"):
                assembly_type = line.split("Assembly type:")[1].strip()
                df_ncbi_meta.loc[genome_id, "assembly_type"] = assembly_type
            elif line.startswith("# Release type:"):
                release_type = line.split("Release type:")[1].strip()
                df_ncbi_meta.loc[genome_id, "release_type"] = release_type
            elif line.startswith("# Assembly level:"):
                assembly_level = line.split("Assembly level:")[1].strip()
                df_ncbi_meta.loc[genome_id, "assembly_level"] = assembly_level
            elif line.startswith("# Genome representation:"):
                genome_representation = line.split("Genome representation:")[1].strip()
                df_ncbi_meta.loc[
                    genome_id, "genome_representation"
                ] = genome_representation
            elif line.startswith("# RefSeq category"):
                refseq_category = line.split("RefSeq category:")[1].strip()
                df_ncbi_meta.loc[genome_id, "refseq_category"] = refseq_category
            elif line.startswith("# RefSeq assembly accession"):
                refseq = line.split("RefSeq assembly accession:")[1].strip()
                df_ncbi_meta.loc[genome_id, "refseq"] = refseq
            elif line.startswith("# GenBank assembly accession"):
                genbank = line.split("GenBank assembly accession:")[1].strip()
                df_ncbi_meta.loc[genome_id, "genbank"] = genbank
            elif line.startswith("# RefSeq assembly and GenBank assemblies identical"):
                refseq_genbank_identity = line.split(
                    "RefSeq assembly and GenBank assemblies identical:"
                )[1].strip()
                df_ncbi_meta.loc[
                    genome_id, "refseq_genbank_identity"
                ] = refseq_genbank_identity

        if strain_found == False:
            df_ncbi_meta.loc[genome_id, "strain"] = genome_id

    df_ncbi_meta.to_json(outfile, orient="index", indent=4)
    return None


if __name__ == "__main__":
    get_ncbi_meta(sys.argv[1], sys.argv[2], sys.argv[3])
