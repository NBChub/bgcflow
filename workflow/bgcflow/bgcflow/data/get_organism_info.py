import os
import sys

import pandas as pd


def extract_org_info(genome_id, samples_path, assembly_report_path, prokka_dir):
    """
    Returns organism_info.txt with genus, species, and strain information required for prokka run inputs.
    This function returns values from provided sample.csv or extracted NCBI assembly reports in json format
    generated by get_assembly_information.py for "ncbi" source type.

    Parameters
    ----------
    1. genome_id : str
        Genome accession id
    2. samples_path : str / path (separated by space for multiple paths)
        Location of the csv file (s) containing sample information as defined in samples.schema.yaml.
        For multiple samples csv, write the paths within double tick ("") and separate each paths with space.
    3. assembly_report_path : str / path
        Location of the assembly information json file generated by get_assembly_information.py
    4. prokka_dir : str / path
        Location of the prokka directory from the given NCBI assembly id

    Returns
    -------
    1. {prokka_dir}/organism_info.txt
        A one lined text file with genus, species, and strain information of a given genome_id
    """
    # wrap single or multiple inputs & generate dataframe
    shell_input = samples_path.split()
    dfList = [pd.read_csv(s).set_index("genome_id", drop=False) for s in shell_input]
    df_samples = pd.concat(dfList, axis=0).fillna("")

    if df_samples.loc[genome_id, "source"] == "ncbi":
        # assembly_file = os.path.join(assembly_report_path, f"{genome_id}.txt")
        extract_ncbi_org_info(prokka_dir, genome_id, assembly_report_path)
    else:
        extract_samples_org_info(prokka_dir, genome_id, df_samples)
    return None


def extract_ncbi_org_info(prokka_dir, genome_id, assembly_report_path):
    """
    Returns organism_info.txt with genus, species, and strain information required for prokka run inputs.
    This function returns values from extracted NCBI assembly reports in json format generated by get_assembly_information.py.

    Parameters
    ----------
    1. prokka_dir : str / path
        Location of the prokka directory from the given NCBI assembly id
    2. genome_id : str
        NCBI assembly id (GCA... / GCF...)
    3. assembly_report_path : str / path
        Location of the assembly information json file generated by get_assembly_information.py

    Returns
    -------
    1. {prokka_dir}/organism_info.txt
        A one lined text file with genus, species, and strain information of a given NCBI assembly id
    """
    assembly_report_json = os.path.join(assembly_report_path, f"{genome_id}.json")
    df_ncbi_meta = pd.read_json(assembly_report_json).T
    df_ncbi_meta = df_ncbi_meta.fillna("")

    for idx in df_ncbi_meta.index:
        GENUS = str(df_ncbi_meta.loc[idx, "genus"])
        SPECIES = str(df_ncbi_meta.loc[idx, "species"])
        STRAIN_ID = str(df_ncbi_meta.loc[idx, "strain"])

        if not os.path.isdir(os.path.join(prokka_dir, idx)):
            os.mkdir(os.path.join(prokka_dir, idx))
        org_info_path = os.path.join(prokka_dir, idx, "organism_info.txt")
        with open(org_info_path, "w") as file_obj:
            file_obj.write(",".join([GENUS, SPECIES, STRAIN_ID]))

    return None


def extract_samples_org_info(prokka_dir, genome_id, df_samples):
    """
    Returns organism_info.txt with genus, species, and strain information required for prokka run inputs.
    This function returns values from provided sample.csv excluding "ncbi" source type.

    Parameters
    ----------
    1. prokka_dir : str / path
        Location of the prokka directory from the given NCBI assembly id
    2. genome_id : str
        Genome accession id
    3. df_sample : pd.DataFrame object
        A dataframe generated by the csv file containing sample information as defined in samples.schema.yaml

    Returns
    -------
    1. {prokka_dir}/organism_info.txt
        A one lined text file with genus, species, and strain information of a given genome_id
    """

    GENUS = str(df_samples.loc[genome_id, "genus"])
    SPECIES = str(df_samples.loc[genome_id, "species"])
    STRAIN_ID = str(df_samples.loc[genome_id, "strain"])

    if not os.path.isdir(os.path.join(prokka_dir, genome_id)):
        os.mkdir(os.path.join(prokka_dir, genome_id))
    org_info_path = os.path.join(prokka_dir, genome_id, "organism_info.txt")
    with open(org_info_path, "w") as file_obj:
        file_obj.write(",".join([GENUS, SPECIES, STRAIN_ID]))

    return None


if __name__ == "__main__":
    extract_org_info(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])
