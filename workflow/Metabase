"""
This Snakefile sets up and runs a Metabase server. It includes functionality for handling setup parameters,
handling server responses, and user interaction for terminating the server. It also includes configuration
for Metabase memory usage, version, setup token, and HTTP address.
"""

include: "rules/common.smk"

import subprocess
import requests
import time
import psutil

def get_process_by_port(port):
    """
    This function returns the process that is using the given port.

    Args:
        port (int): The port number to check.

    Returns:
        psutil.Process: The process using the given port, or None if no process is using the port.
    """
    for proc in psutil.process_iter(['pid', 'name', 'connections']):
        try:
            if proc.name() == "java":
                for conn in proc.connections():
                    if conn.status == psutil.CONN_LISTEN and conn.laddr.port == port:
                        return proc
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

    return None

def setup_metabase(token, api_url, metabase_config):
    """
    Sets up and starts a Metabase server.

    This function checks if Java is installed, sets up Metabase environment variables, starts the Metabase server,
    and sets up Metabase using the API. It also handles user interaction for terminating the Metabase server.

    Args:
        token (str): The setup token for Metabase.
        api_url (str): The URL of the Metabase API.
        metabase_config (dict): A dictionary containing configuration parameters for Metabase, including:
            - 'MB_IS_METABOT_ENABLED': Whether the Metabot is enabled.
            - 'METABASE_MIN_MEMORY': The minimum amount of memory for the Metabase server.
            - 'METABASE_MAX_MEMORY': The maximum amount of memory for the Metabase server.
            - 'DMB_SETUP_TOKEN': The setup token for Metabase.
            - 'METABASE_VERSION': The version of Metabase.
            - 'METABASE_HTTP': The HTTP address of the Metabase server.

    Returns:
        None
    """
    # Check if Java is installed
    if os.system("java -version") != 0:
        print("Java is not installed. Please install Java and try again.")
        exit(1)
    # Set up Metabase environment variables
    os.environ["MB_IS_METABOT_ENABLED"] = metabase_config["MB_IS_METABOT_ENABLED"]
    # Start the Metabase server in the background
    command_line = f"(cd resources/metabase && java -Xms{metabase_config['METABASE_MIN_MEMORY']} -Xmx{metabase_config['METABASE_MAX_MEMORY']} -DMB_SETUP_TOKEN={metabase_config['DMB_SETUP_TOKEN']} -jar metabase_{metabase_config['METABASE_VERSION']}.jar)"
    print(command_line)

    metabase_port = int(metabase_config['METABASE_HTTP'].split(":")[-1])
    p = get_process_by_port(metabase_port)

    if p is not None:
        print(f"Process {p.pid} is listening on port {metabase_port}.")
    else:
        p = subprocess.Popen(
            ["sh", "-c", command_line],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        print(f"Metabase is running - pid: {p.pid}")

    # Set up Metabase using the API
    setup_params = {
        "token": token,
        "prefs": {
            "site_name": "BGCFlow",
            "allow_tracking": "true"
        },
        "database": None,
        "user": {
            "first_name": "Admin",
            "last_name": "BGCFlow",
            "email": "admin@bgcflow.com",
            "password": "Q&@Gt853Q7Ae",
            "site_name": "BGCFlow"
        }
    }

    ctr = 1
    print("Connecting to metabase...")
    time.sleep(10)

    for tries in range(10):
        print(f"Retrying to connect: {ctr}x")
        ctr = ctr + 1

        try:
            response = requests.post(
                f"{api_url}/setup",
                headers={"Content-Type": "application/json"},
                json=setup_params,
                timeout=5
            )

            if response.status_code == 200:
                print("Metabase setup successful.")
                print(f'\nLogin account: {setup_params["user"]["email"]}')
                print(f'Password: {setup_params["user"]["password"]}')
                print(f"Please change the password once you logged in.\n")
                break
            elif response.status_code == 403:
                print(f"WARNING {response.status_code}: {response.text}")
                break
            else:
                print(response.status_code, response.text)
                time.sleep(5)

        except (requests.exceptions.RequestException, requests.exceptions.ReadTimeout, requests.exceptions.ConnectTimeout):  # This is the correct syntax
            time.sleep(5)

    # Prompt the user to enter a command to terminate the process
    try:
        while True:
            print(f"Metabase is running at: {api_url.strip('/api')}")
            print("To add database connections, see: https://www.metabase.com/docs/latest/databases/connecting")
            command = input("Press q to quit Metabase server: ")
            if command == "q":
                # Terminate the Metabase process
                print(f"Shutting down pid: {p.pid}")
                p.terminate()
                port_process = get_process_by_port(metabase_port)
                if port_process is not None:
                    port_process.terminate()
                print("\n")
                break

    except KeyboardInterrupt:
            # Gracefully terminate the Metabase process when Ctrl+C is pressed
            print(f"\nShutting down Metabase (pid: {p.pid})")
            p.terminate()
            port_process = get_process_by_port(metabase_port)
            if port_process is not None:
                port_process.terminate()
            print("\n")
    # Wait for the Metabase process to finish
    p.wait()


metabase_config = {
    "METABASE_MIN_MEMORY": "2g",
    "METABASE_MAX_MEMORY": "8g",
    "METABASE_VERSION": "v0.49.6",
    "METABASE_DUCKDB_PLUGIN_VERSION": "0.2.6",
    "DMB_SETUP_TOKEN": "ad0fb086-351b-4fa5-a17e-76282d2c9753",
    "METABASE_HTTP": "http://localhost:3000",
    "MB_IS_METABOT_ENABLED" : "true"
}

if "utility_parameters" in config.keys():
    for param_key in metabase_config.keys():
        if param_key in list(config["utility_parameters"].keys()):
            metabase_config[param_key] = config["utility_parameters"][param_key]

rule all:
    input:
        f"resources/metabase/metabase_{metabase_config['METABASE_VERSION']}.jar",
        f"resources/metabase/plugins/duckdb.metabase-driver_{metabase_config['METABASE_DUCKDB_PLUGIN_VERSION']}.jar",

onsuccess:
    setup_metabase(metabase_config['DMB_SETUP_TOKEN'], f"{metabase_config['METABASE_HTTP']}/api", metabase_config)

##### Modules #####
include: "rules/metabase.smk"
